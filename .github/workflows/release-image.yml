name: Release Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
        type: string
      authors:
        description: "Comma-separated list of author emails"
        required: true
        type: string
      image_sha:
        description: "6-digit commit SHA used for the promoted image (e.g. 3e79a3 or 'latest')"
        required: false
        default: "latest"
        type: string
  push:
    branches:
      - '**'

permissions:
  contents: write
  pull-requests: write
     
jobs:
  # Image2commit: Creates a mapping between the image_sha given as input and the actual git commit
  # This is necassary for the release-image step that requires checking out that exact git commit
  image2commit:
    name: Resolve Commit SHA from Image
    runs-on: ubuntu-latest
    environment: release
    outputs:
      commit_sha: ${{ steps.resolve.outputs.commit_sha }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Run image2commit
        id: resolve
        uses: ./.github/actions/image2commit
        with:
          register: docker.io
          repo: andrpac/mongodb-atlas-kubernetes-operator-prerelease
          image_sha: latest

  # Check-commit: Outputs the commit used when someone wants to use latest image_sha
  # and does not know what version of operator will end up using
  check-commit:
    name: Check resolved commit
    runs-on: ubuntu-latest
    needs: image2commit
    steps:
      - name: Echo resolved commit
        run: |
          echo "Resolved commit: ${{ needs.image2commit.outputs.commit_sha }}"

  # Release-image: Created and uploads a release for the specified operator version given in the image_sha
  # Note, with new releases, all of the release artifacts will be stored withing docs/releases/{release_version}
  release-image:
    runs-on: ubuntu-latest
    environment: release
    needs: image2commit
    env:
      VERSION: ${{ github.event.inputs.version || 'vtest-0.0.0-dev' }}
      AUTHORS: ${{ github.event.inputs.authors || 'unknown' }}
      IMAGE_SHA: ${{ github.event.inputs.image_sha || 'latest' }}
      DOCKER_SIGNATURE_REPO: docker.io/andrpac/signatures
      DOCKER_RELEASE_REPO: docker.io/andrpac/mongodb-atlas-kubernetes-operator
      DOCKER_PRERELEASE_REPO: docker.io/andrpac/mongodb-atlas-kubernetes-operator-prerelease
      QUAY_RELEASE_REPO: quay.io/andrpac/mongodb-atlas-kubernetes-operator
      QUAY_PRERELEASE_REPO: quay.io/andrpac/mongodb-atlas-kubernetes-operator-prerelease
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Login in into all registries
      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to Quay registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      # This step configures all of the dynamic variables needed for later steps
      - name: Configure job environment for downstream steps
        id: tags
        run: |
          promoted_tag="promoted-${IMAGE_SHA}"
          release_tag="${VERSION}"
          certified_tag="certified-${release_tag}"

          docker_image_url="${DOCKER_RELEASE_REPO}:${release_tag}"
          quay_image_url="${QUAY_RELEASE_REPO}:${release_tag}"
          quay_certified_image_url="${QUAY_RELEASE_REPO}:${certified_tag}"

          echo "promoted_tag=$promoted_tag"                         >> $GITHUB_OUTPUT
          echo "release_tag=$release_tag"                           >> $GITHUB_OUTPUT
          echo "certified_tag=$certified_tag"                       >> $GITHUB_OUTPUT
          echo "docker_image_url=$docker_image_url"                 >> $GITHUB_OUTPUT
          echo "quay_image_url=$quay_image_url"                     >> $GITHUB_OUTPUT
          echo "quay_certified_image_url=$quay_certified_image_url" >> $GITHUB_OUTPUT

      # Link updates to pr: all-in-one.yml, helm-updates, sdlc requirements
      - name: Generate deployment configurations
        uses: ./.github/actions/gen-install-scripts
        with:
          ENV: prod
          IMAGE_URL: ${{ steps.tags.outputs.docker_image_url }}

      - name: Create SDLC report
        run: make gen-sdlc-checklist 

      # Create PR on release branch with all updates generated
      - name: Create release pr with all updated artefacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export BRANCH="new-release/${VERSION}"
          export COMMIT_MESSAGE="feat: release ${VERSION}"
          export RELEASE_DIR="releases/${VERSION}"
          export SOURCE_COMMIT=$(git rev-parse HEAD)

          git config --global user.name "andrpac"
          git config --global user.email "andrei.pacurar@mongodb.com"

          mkdir -p "$RELEASE_DIR"
          cp -r deploy "$RELEASE_DIR/deploy"
          cp -r bundle "$RELEASE_DIR/bundle"
          cp -r helm-charts "$RELEASE_DIR/helm-charts"
          cp bundle.Dockerfile "$RELEASE_DIR/bundle.Dockerfile"

          git fetch origin
          git checkout -f -b "$BRANCH" origin/main

          git add -f "$RELEASE_DIR"
          scripts/create-signed-commit.sh
          git push -f origin "$BRANCH"
          
          gh pr create \
            --draft \
            --base main \
            --head "$BRANCH" \
            --title "$COMMIT_MESSAGE" \
            --body "This is an autogenerated PR to prepare for the release"

          git checkout $SOURCE_COMMIT

      # Create release artefacts on GitHub
      - name: Create configuration package
        run: |
          set -x
          tar czvf atlas-operator-all-in-one-${{ env.VERSION }}.tar.gz -C deploy all-in-one.yaml

      - name: Tag the release assets
        run: |
          git fetch --tags
          git tag -f ${{ env.VERSION }}
          git push -f origin ${{ env.VERSION }}
        
      - name: Create release on GitHub
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: false
          tag_name: "${{ env.VERSION }}"
          name: "${{ env.VERSION }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          body_path: docs/release-notes/release-notes-template.md
          files: |
            ./atlas-operator-all-in-one-${{ env.VERSION }}.tar.gz
            ./docs/releases/v${{ env.VERSION }}/sdlc-compliance.md
